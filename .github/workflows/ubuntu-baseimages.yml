name: 'Check Ubuntu Repos, Rebuild Base Images, and Update Badges'

on:
  schedule:
    - cron: '0,20,40 * * * *'
  workflow_dispatch:

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_version: "24.04"
            os_name: "noble"
          - os_version: "22.04"
            os_name: "jammy"
          - os_version: "20.04"
            os_name: "focal"
          - os_version: "18.04"
            os_name: "bionic"
          - os_version: "16.04"
            os_name: "xenial"
          - os_version: "14.04"
            os_name: "trusty"

    outputs:
      noble-crit:  ${{ steps.scan-noble.outputs.crit }}
      noble-high:  ${{ steps.scan-noble.outputs.high }}
      noble-med:   ${{ steps.scan-noble.outputs.med }}
      noble-low:   ${{ steps.scan-noble.outputs.low }}
      jammy-crit:  ${{ steps.scan-jammy.outputs.crit }}
      jammy-high:  ${{ steps.scan-jammy.outputs.high }}
      jammy-med:   ${{ steps.scan-jammy.outputs.med }}
      jammy-low:   ${{ steps.scan-jammy.outputs.low }}
      focal-crit:  ${{ steps.scan-focal.outputs.crit }}
      focal-high:  ${{ steps.scan-focal.outputs.high }}
      focal-med:   ${{ steps.scan-focal.outputs.med }}
      focal-low:   ${{ steps.scan-focal.outputs.low }}
      bionic-crit: ${{ steps.scan-bionic.outputs.crit }}
      bionic-high: ${{ steps.scan-bionic.outputs.high }}
      bionic-med:  ${{ steps.scan-bionic.outputs.med }}
      bionic-low:  ${{ steps.scan-bionic.outputs.low }}
      xenial-crit: ${{ steps.scan-xenial.outputs.crit }}
      xenial-high: ${{ steps.scan-xenial.outputs.high }}
      xenial-med:  ${{ steps.scan-xenial.outputs.med }}
      xenial-low:  ${{ steps.scan-xenial.outputs.low }}
      trusty-crit: ${{ steps.scan-trusty.outputs.crit }}
      trusty-high: ${{ steps.scan-trusty.outputs.high }}
      trusty-med:  ${{ steps.scan-trusty.outputs.med }}
      trusty-low:  ${{ steps.scan-trusty.outputs.low }}

    steps:
      - name: 'Check out the repo'
        uses: actions/checkout@v4

      - name: 'Cache APT state hash for Ubuntu ${{ matrix.os_version }}'
        uses: actions/cache@v4
        id: cache-apt-state
        with:
          path: apt-state-${{ matrix.os_version }}.hash
          key: ubuntu-repo-state-${{ matrix.os_version }}

      - name: 'Generate current APT state hash for Ubuntu ${{ matrix.os_version }}'
        id: generate_hash
        run: |
          echo "Checking APT lists for Ubuntu:${{ matrix.os_version }}..."
          CURRENT_HASH=$(docker run --rm ubuntu:${{ matrix.os_version }} bash -c "apt-get update > /dev/null && find /var/lib/apt/lists/ -type f -print0 | xargs -0 sha256sum | sort | sha256sum | awk '{print \$1}'")
          echo "Current state hash: $CURRENT_HASH"
          echo "new_hash=$CURRENT_HASH" >> $GITHUB_OUTPUT

      - name: 'Compare hashes for Ubuntu ${{ matrix.os_version }}'
        id: check_changes
        run: |
          OLD_HASH=$(cat apt-state-${{ matrix.os_version }}.hash 2>/dev/null || echo "no-previous-hash")
          NEW_HASH="${{ steps.generate_hash.outputs.new_hash }}"
          if [ "$OLD_HASH" == "$NEW_HASH" ]; then
            echo "âœ… No changes detected for Ubuntu ${{ matrix.os_version }}."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "ðŸš¨ Changes detected for Ubuntu ${{ matrix.os_version }}! Triggering rebuild."
            echo "changed=true" >> $GITHUB_OUTPUT
            echo $NEW_HASH > apt-state-${{ matrix.os_version }}.hash
          fi

      - name: 'Set up Docker Buildx'
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 'Log in to Docker Hub'
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Get current date
        if: steps.check_changes.outputs.changed == 'true'
        id: get_date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: 'Build Docker image'
        if: steps.check_changes.outputs.changed == 'true'
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ubuntu
          push: false
          load: true
          build-args: |
            UBUNTU_VERSION=${{ matrix.os_version }}
          tags: |
            anchorlayer/ubuntu-${{ matrix.os_name }}:latest
            anchorlayer/ubuntu-${{ matrix.os_name }}:${{ steps.get_date.outputs.date }}
            anchorlayer/ubuntu-${{ matrix.os_version }}:latest
            anchorlayer/ubuntu-${{ matrix.os_version }}:${{ steps.get_date.outputs.date }}
            anchorlayer/ubuntu:${{ matrix.os_version }}-latest
            anchorlayer/ubuntu:${{ matrix.os_version }}-${{ steps.get_date.outputs.date }}
            anchorlayer/ubuntu:${{ matrix.os_name }}-latest
            anchorlayer/ubuntu:${{ matrix.os_name }}-${{ steps.get_date.outputs.date }}

      - name: 'Push Docker image'
        if: ${{ steps.check_changes.outputs.changed == 'true' && success() }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ubuntu
          push: true
          load: true
          build-args: |
            UBUNTU_VERSION=${{ matrix.os_version }}
          # The tag remains dynamic as before
          tags: |
            anchorlayer/ubuntu-${{ matrix.os_name }}:latest
            anchorlayer/ubuntu-${{ matrix.os_name }}:${{ steps.get_date.outputs.date }}
            anchorlayer/ubuntu-${{ matrix.os_version }}:latest
            anchorlayer/ubuntu-${{ matrix.os_version }}:${{ steps.get_date.outputs.date }}
            anchorlayer/ubuntu:${{ matrix.os_version }}-latest
            anchorlayer/ubuntu:${{ matrix.os_version }}-${{ steps.get_date.outputs.date }}
            anchorlayer/ubuntu:${{ matrix.os_name }}-latest
            anchorlayer/ubuntu:${{ matrix.os_name }}-${{ steps.get_date.outputs.date }}

      - name: 'Scan image with Grype'
        id: scan-${{ matrix.os_name }}
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          IMAGE_TAG="anchorlayer/ubuntu-${{ matrix.os_name }}:latest"
          grype $IMAGE_TAG -o json > vulns.json

          CRIT=$(jq '.matches[] | select(.vulnerability.severity=="Critical")' vulns.json | wc -l)
          HIGH=$(jq '.matches[] | select(.vulnerability.severity=="High")' vulns.json | wc -l)
          MED=$(jq '.matches[] | select(.vulnerability.severity=="Medium")' vulns.json | wc -l)
          LOW=$(jq '.matches[] | select(.vulnerability.severity=="Low")' vulns.json | wc -l)

          echo "crit=$CRIT" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "med=$MED"   >> $GITHUB_OUTPUT
          echo "low=$LOW"   >> $GITHUB_OUTPUT

  update-readme:
    runs-on: ubuntu-latest
    needs: check-and-build
    steps:
      - name: 'Check out the repo'
        uses: actions/checkout@v4

      - name: 'Update README badges'
        run: |
          update_badge () {
            name=$1; crit=$2; high=$3; med=$4; low=$5
            crit_color="red";    [ "$crit" -eq 0 ] && crit_color="brightgreen"
            high_color="orange"; [ "$high" -eq 0 ] && high_color="brightgreen"
            med_color="yellow";  [ "$med"  -eq 0 ] && med_color="brightgreen"
            low_color="lightgrey"; [ "$low" -eq 0 ] && low_color="brightgreen"

            sed -i "s|\(<!-- ${name}-critical -->\)[0-9]*-[a-z]*|\1${crit}-${crit_color}|" README.md
            sed -i "s|\(<!-- ${name}-high -->\)[0-9]*-[a-z]*|\1${high}-${high_color}|" README.md
            sed -i "s|\(<!-- ${name}-medium -->\)[0-9]*-[a-z]*|\1${med}-${med_color}|" README.md
            sed -i "s|\(<!-- ${name}-low -->\)[0-9]*-[a-z]*|\1${low}-${low_color}|" README.md
          }

          update_badge noble  ${{ needs.check-and-build.outputs.noble-crit }}  ${{ needs.check-and-build.outputs.noble-high }}  ${{ needs.check-and-build.outputs.noble-med }}  ${{ needs.check-and-build.outputs.noble-low }}
          update_badge jammy  ${{ needs.check-and-build.outputs.jammy-crit }}  ${{ needs.check-and-build.outputs.jammy-high }}  ${{ needs.check-and-build.outputs.jammy-med }}  ${{ needs.check-and-build.outputs.jammy-low }}
          update_badge focal  ${{ needs.check-and-build.outputs.focal-crit }}  ${{ needs.check-and-build.outputs.focal-high }}  ${{ needs.check-and-build.outputs.focal-med }}  ${{ needs.check-and-build.outputs.focal-low }}
          update_badge bionic ${{ needs.check-and-build.outputs.bionic-crit }} ${{ needs.check-and-build.outputs.bionic-high }} ${{ needs.check-and-build.outputs.bionic-med }} ${{ needs.check-and-build.outputs.bionic-low }}
          update_badge xenial ${{ needs.check-and-build.outputs.xenial-crit }} ${{ needs.check-and-build.outputs.xenial-high }} ${{ needs.check-and-build.outputs.xenial-med }} ${{ needs.check-and-build.outputs.xenial-low }}
          update_badge trusty ${{ needs.check-and-build.outputs.trusty-crit }} ${{ needs.check-and-build.outputs.trusty-high }} ${{ needs.check-and-build.outputs.trusty-med }} ${{ needs.check-and-build.outputs.trusty-low }}

      - name: 'Commit README changes'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md
          git commit -m "Update vuln badges for all images"
          git push
